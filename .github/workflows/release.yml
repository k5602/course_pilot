name: Release Pipeline
on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-deps-${{ hashFiles('Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-deps-

      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-cache-${{ hashFiles('.github/workflows/release.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-cache-

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libxdo3 \
            libxdo-dev \
            patchelf \
            pkg-config \
            libglib2.0-dev \
            libgdk-pixbuf2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            libgdk3.0-cil

      - name: Install Dioxus CLI
        run: cargo install dioxus-cli --locked

      - name: Clean previous build artifacts
        run: cargo clean

      - name: Build Dioxus app for Linux
        run: |
          export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
          dx build --release --platform desktop

      - name: Strip binary (reduce size)
        run: strip ./target/release/course_pilot

      - name: Package Linux build
        run: |
          mkdir -p release-artifacts
          cp ./target/release/course_pilot ./release-artifacts/
          chmod +x ./release-artifacts/course_pilot
          tar -czf course-pilot-linux-x64.tar.gz -C release-artifacts course_pilot

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: course-pilot-linux
          path: course-pilot-linux-x64.tar.gz

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-deps-${{ hashFiles('Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-deps-

      - name: Install Dioxus CLI
        run: |
          $env:RUSTFLAGS="-C target-feature=+crt-static"
          cargo install dioxus-cli --locked

      - name: Build Dioxus app for Windows
        run: |
          $env:RUSTFLAGS="-C target-feature=+crt-static"
          dx build --release --platform desktop

      - name: Package Windows build
        run: |
          mkdir release-artifacts
          Copy-Item ./target/release/course_pilot.exe ./release-artifacts/
          Compress-Archive -Path ./release-artifacts/* -DestinationPath course-pilot-windows-x64.zip

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: course-pilot-windows
          path: course-pilot-windows-x64.zip

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: course-pilot-linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: course-pilot-windows

      - name: Get file sizes
        id: sizes
        run: |
          linux_size=$(du -h course-pilot-linux-x64.tar.gz | cut -f1)
          windows_size=$(du -h course-pilot-windows-x64.zip | cut -f1)
          echo "linux_size=$linux_size" >> $GITHUB_OUTPUT
          echo "windows_size=$windows_size" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            sed -n '/^## \[/,/^## \[/p' CHANGELOG.md | head -n -1 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=Automated release build" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            course-pilot-linux-x64.tar.gz
            course-pilot-windows-x64.zip
          tag_name: ${{ github.ref_name }}
          name: Course Pilot ${{ github.ref_name }}
          body: |
            ## 🚀 Course Pilot ${{ github.ref_name }}

            ### 📦 Downloads
            | Platform | File | Size |
            |----------|------|------|
            | 🐧 Linux x64 | [`course-pilot-linux-x64.tar.gz`](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/course-pilot-linux-x64.tar.gz) | ${{ steps.sizes.outputs.linux_size }} |
            | 🪟 Windows x64 | [`course-pilot-windows-x64.zip`](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/course-pilot-windows-x64.zip) | ${{ steps.sizes.outputs.windows_size }} |

            ### 🚀 Quick Install

            **Linux:**
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/course-pilot-linux-x64.tar.gz
            tar -xzf course-pilot-linux-x64.tar.gz
            ./course_pilot
            ```

            **Windows:**
            1. Download the ZIP file
            2. Extract to your desired location
            3. Run `course_pilot.exe`

            ### ⚙️ System Requirements
            - **Linux**: Ubuntu 20.04+ / Debian 11+ / Fedora 35+ (with GTK3)
            - **Windows**: Windows 10 (1903+) / Windows 11

            ---

            ### 📝 Changes
            ${{ steps.changelog.outputs.changelog }}

            *Built with ❤️ using Dioxus*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
